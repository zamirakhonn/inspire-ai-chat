from flask import Flask, request
from flask_restx import Api, Resource, fields
from dotenv import load_dotenv
from datetime import datetime
import os
import socket

# Import your AI and history logic
from services import ai
from services.history import add_to_history, get_chat_history

# ----------------- App Setup -----------------
load_dotenv()
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "supersecretkey")

# Swagger setup
api = Api(
    app,
    version="1.0",
    title="Inspire AI API üåø",
    description="A minimal yet powerful REST API for chatting with Inspire AI",
    doc="/swagger"
)

# ----------------- Chat Namespace -----------------
chat_ns = api.namespace("chat", description="Chat with Inspire AI")

# Models for Swagger documentation
chat_model = api.model("ChatRequest", {
    "user_id": fields.String(required=True, description="Unique user ID (e.g., username or session key)"),
    "message": fields.String(required=True, description="Message text sent by the user")
})

chat_response = api.model("ChatResponse", {
    "reply": fields.String(description="Response generated by Inspire AI"),
    "time": fields.String(description="Server-side timestamp")
})

# ----------------- Chat Endpoint -----------------
@chat_ns.route("/")
class Chat(Resource):
    @chat_ns.expect(chat_model)
    @chat_ns.marshal_with(chat_response)
    def post(self):
        """Send a message and receive an AI-generated reply."""
        data = request.json or {}
        user_id = data.get("user_id", "guest_user")
        message = (data.get("message") or "").strip()

        if not message:
            return {"reply": "‚ö†Ô∏è Please send a message.", "time": datetime.now().strftime("%H:%M")}, 400

        # Log user message to chat history
        add_to_history(user_id, "user", message)

        try:
            # Generate AI response using chat history context
            history = get_chat_history(user_id)
            answer_obj = ai.generate_response(message, history, user_id=user_id)

            # answer_obj can be either a string (old behaviour) or structured dict
            if isinstance(answer_obj, dict):
                reply_text = answer_obj.get("reply") or answer_obj.get("text") or ""
                # If AI returned structured analysis, also log the assistant reply
                add_to_history(user_id, "assistant", reply_text)
                return {"reply": reply_text, "time": datetime.now().strftime("%H:%M")}
            else:
                # simple string reply
                add_to_history(user_id, "assistant", str(answer_obj))
                return {"reply": str(answer_obj), "time": datetime.now().strftime("%H:%M")}

        except Exception as e:
            return {"reply": f"‚ö†Ô∏è Server error: {str(e)}", "time": datetime.now().strftime("%H:%M")}, 500

    def get(self):
        """Basic info endpoint."""
        return {"reply": "Use POST /chat with JSON {'user_id': 'id', 'message': 'your text'}",
                "time": datetime.now().strftime("%H:%M")}

# Register namespace
api.add_namespace(chat_ns)

# ----------------- Run App (with port fallback) -----------------

def find_free_port(preferred=5001, fallback=5002):
    # try preferred then fallback, then ask OS
    for p in (preferred, fallback):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.bind(("127.0.0.1", p))
                return p
            except OSError:
                continue
    # last resort: let OS assign a free port
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(("127.0.0.1", 0))
        return s.getsockname()[1]
    

if __name__ == "__main__":
    preferred = int(os.environ.get("PREFERRED_PORT", 5001))
    port_to_use = find_free_port(preferred=preferred, fallback=5002)
    print(f"Starting server on http://0.0.0.0:{port_to_use}")
    app.run(host="0.0.0.0", port=port_to_use, debug=True)

