from flask import Flask, request
from flask_restx import Api, Resource, fields
from dotenv import load_dotenv
from datetime import datetime
import os

# Import your AI and history logic
from services import ai
from services.history import add_to_history, get_chat_history

# ----------------- App Setup -----------------
load_dotenv()
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "supersecretkey")

# Swagger setup
api = Api(
    app,
    version="1.0",
    title="Inspire AI API üåø",
    description="A minimal yet powerful REST API for chatting with Inspire AI",
    doc="/swagger"
)

# ----------------- Chat Namespace -----------------
chat_ns = api.namespace("chat", description="Chat with Inspire AI")

# Models for Swagger documentation
chat_model = api.model("ChatRequest", {
    "user_id": fields.String(required=True, description="Unique user ID (e.g., username or session key)"),
    "message": fields.String(required=True, description="Message text sent by the user")
})

chat_response = api.model("ChatResponse", {
    "reply": fields.String(description="Response generated by Inspire AI"),
    "time": fields.String(description="Server-side timestamp")
})

# ----------------- Chat Endpoint -----------------
@chat_ns.route("/")
class Chat(Resource):
    @chat_ns.expect(chat_model)
    @chat_ns.marshal_with(chat_response)
    def post(self):
        """Send a message and receive an AI-generated reply."""
        data = request.json
        user_id = data.get("user_id", "guest_user")
        message = data.get("message", "").strip()

        if not message:
            return {"reply": "‚ö†Ô∏è Please send a message.", "time": datetime.now().strftime("%H:%M")}, 400

        # Log user message to chat history
        add_to_history(user_id, "user", message)

        try:
            # Generate AI response using chat history context
            answer = ai.generate_response(message, get_chat_history(user_id))
            add_to_history(user_id, "assistant", answer)

            return {"reply": answer, "time": datetime.now().strftime("%H:%M")}
        except Exception as e:
            return {"reply": f"‚ö†Ô∏è Server error: {str(e)}", "time": datetime.now().strftime("%H:%M")}, 500

    def get(self):
        """Basic info endpoint."""
        return {"reply": "Use POST /chat with JSON {'user_id': 'id', 'message': 'your text'}",
                "time": datetime.now().strftime("%H:%M")}

# Register namespace
api.add_namespace(chat_ns)

# ----------------- Run App -----------------
if __name__ == "__main__":
    app.run(debug=True, port=5001)
